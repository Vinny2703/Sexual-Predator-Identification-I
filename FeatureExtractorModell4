library("dplyr")
library("xml")
library("tidyr")
library("methods")
library("stringr")
library("readr")
library("data.tree")
library("base")

#Dateneinlesen
#Bereinigter eigener Trainingscorpus
tc_e<-xmlParse(file="tc1.xml")
rootnode_tc_e <-xmlRoot(tc_e)
rootsize(rootnode_tc_e)

#Labeldateien einlesen
sexualpredetor_tc <- read.table("pan12-sexual-predator-identification-training-corpus-predators-2012-05-01.txt")
print(sexualpredetor_tc)

#Feature-Funktionen 
startetconversation <- function(doc,wert){
  autorID<-toString(xpathApply(doc,paste0("//conversation[position()='",wert,"']/message[1]/author"),xmlValue))
return(autorID)
}

#Funktion zum erstellen einer Autorenliste
autorenListe <- function(wert,doc){ 
  aliste <- list()
  aliste <- xpathApply(doc, paste0("/conversations/conversation[position()='",wert,"']/message[not(author = following-sibling::message/author)]/author"), xmlValue)
  return(aliste)
}

spamfilter <- function(wert, doc) {
    aut1 <- toString(autorenListe(wert, doc)[1])
    aut2 <- toString(autorenListe(wert, doc)[2])
    messagelist <- list()
    b <- 1
    j <- 0
    n1 <- 0
    n2 <- 0
    q1 <- 0
    q2 <- 0
    r_autor1 <- 0
    r_autor2 <- 0
      while(b <= xmlSize(xpathApply(doc, paste0("/conversations/conversation[position()='",wert,"']/message")))){
        aut_ID <- toString(xpathApply(doc, paste0("/conversations/conversation[position()='",wert,"']/message[position()='",b,"']/author"), xmlValue))
        length(messagelist) <- length(messagelist)+1
        messagelist[length(messagelist)]<-toString(xpathApply(doc, paste0("/conversations/conversation[position()='",wert,"']/message[position()='",b,"']/text[1]"), xmlValue))
        if(aut_ID == toString(xpathApply(doc, paste0("/conversations/conversation[position()='",wert,"']/message[position()='",b+1,"']/author"), xmlValue))){
        j <- j+1
        }else if(j >= 3){
          q <- 0
          if("?"%in%messagelist){
            q <- q+1
          }
          else if(" fm"%in%messagelist){
            q <- q+1
          }
          else if(" mf"%in%messagelist){
            q <- q+1
          }
          else if(" where "%in%messagelist){
            q <- q+1
          }
          else if(" what "%in%messagelist){
            q <- q+1
          }
          else if(" why "%in%messagelist){
            q <- q+1
          }
          else if(" how "%in%messagelist){
            q <- q+1
          }
          else if(" who "%in%messagelist){
            q <- q+1
          }
          if(aut1 == aut_ID){
            n1 <- n1+1
            q1 <- q1+q
          } else {
            n2 <- n2+1
            q2 <- q2+q
          }
          j <- 0
          messagelist <- list()
        }else{
          j <- 0
          messagelist <- list()
        }
          
        b <- b+1
      }
    if(n1==0){n1 <- 1}
    if(n2==0){n2 <- 1}
    r_autor1 <- q1/n1
    r_autor2 <- q2/n2
    print(wert)
  
  autor <- c(aut1, aut2)
  ergebnis <- c(r_autor1,r_autor2)
  df <- data.frame(autor, ergebnis)
  return(df)
}


#Liste mit Conversationen
#Funktion für erstellen der Listen
conversationliste<-function(doc){
  con_l <- list()
  con_l <- xpathApply(doc,"/conversations/conversation", xmlAttrs)
  return(con_l)
}

#Listen der Conversationen in Corpa
conl_tc_e<-conversationliste(tc_e)

#Featurextrator

featureExtrator<- funktion(doc,conversationl,label,featureDictionary){
 #Vectoren für die Initialisierung des leeren Feature Dictionary 
  autorID<-vector()
  CID<-vector()
  starts<-numeric()#1-gestartet 0-nicht gestartet
  spam<-numeric()
  l<-numeric()#1-sexualpredetor 0-kein sexualpredetor
  featureDictionary <-data.frame(autorID,CID,starts,spam,l)
for(i in 1:xmlSize(xpathApply(doc, "/conversations/conversation",xmlAttrs))){
  conversationID<-toString(xpathApply(doc, paste0("/conversations/conversation[position()='",i,"']"), xmlAttrs))
  #AutorID von Autor, der Konversation gestartet hat
  starter<- startetconversation(doc,i)
  #!!!!Spamfilter (nicht fuer originalen Korpus)!!!! 
  spamf <- spamfilter(i,doc)
  #
  for (m in 1:length(autorenListe(i,doc))) {
    aliste<-autorenListe(i,doc)
    autorID <-aliste[m]
  if(autorID%in%label){
    if(starter==autorID){
      autorID<-c(autorID)
      CID<- c(conversationID)
      starts<-c(1)
      if(autorID==spamf[1, 1]){
        spam <- spamf[1, 2]
      }else{
        spam <- spamf[2, 2]
      }      
      l<-c(1)
      x<-data.frame(autorID,CID,starts,spam,l)
      featureDictionary<-rbind(featureDictionary,x)
    }
    else{
      autorID<-c(autorID)
      CID<- c(conversationID)
      starts<-c(0)
      spam<-numeric()
      l<-c(1)
      x<-data.frame(autorID,CID,starts,spam,l)
      featureDictionary<-rbind(featureDictionary,x)
  }
  }else{
    if(starter==autorID){
      autorID<-c(autorID)
      CID<- c(conversationID)
      starts<-c(1)
      spam<-numeric()
      l<-c(0)
      x<-data.frame(autorID,CID,starts,spam,l)
      featureDictionary<-rbind(featureDictionary,x)
    }
    else{
      autorID<-c(autorID)
      CID<- c(conversationID)
      starts<-c(0)
      spam<-numeric()
      l<-c(0)
      x<-data.frame(autorID,CID,starts,spam,l)
      featureDictionary<-rbind(featureDictionary,x)
    }
  }
}
} 
  return(featureDictionary)
  } 

#Featurextraktion
#Trainingsdaten eigene und Spam Feature und Converstionstart Feature
featureT_tc_e <-featureExtrator(tc_e,conl_tc_e,sexualpredetor_tc,featureT_tc_e)
